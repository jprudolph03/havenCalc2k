{"version":3,"sources":["HavenOutput.js","HavenInput.js","App.js","serviceWorker.js","index.js"],"names":["HavenOutput","class","this","props","partLength","lbLength","parseInt","toFixed","Component","HavenInput","state","handleChange","bind","e","preventDefault","setState","target","name","value","onChange","type","lgLength","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAmBeA,E,uKAbX,OACE,yBAAKC,MAAM,2BACT,2BAAG,gDAAH,IAAkCC,KAAKC,MAAMC,YAC7C,2BAAG,mDAAH,IAAqCF,KAAKC,MAAME,UAChD,2BAAG,gDAAH,IAAkCC,SAAUJ,KAAKC,MAAME,SAAWH,KAAKC,MAAMC,aAC7E,2BAAG,gDAAH,KAAoCF,KAAKC,MAAME,SAAWH,KAAKC,MAAMC,YAAaG,QAAQ,IAC1F,2BAAG,6CAAH,IAA2F,KAA3DD,SAAUJ,KAAKC,MAAME,SAAWH,KAAKC,MAAMC,aAC3E,2BAAG,qDAAH,MAA2CF,KAAKC,MAAME,SAAWH,KAAKC,MAAMC,YAAaG,QAAQ,GAAmE,KAA3DD,SAAUJ,KAAKC,MAAME,SAAWH,KAAKC,MAAMC,aAAuBG,QAAQ,S,GAVjKC,aCsCXC,E,kDApCb,WAAYN,GAAO,IAAD,8BAChB,cAAMA,IACDO,MAAQ,CACXN,WAAY,GACZC,SAAU,IAEZ,EAAKM,aAAe,EAAKA,aAAaC,KAAlB,gBANJ,E,yDASLC,GACZA,EAAEC,iBACFZ,KAAKa,SAAL,eACGF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,U,+BAM3B,OACE,yBAAKjB,MAAM,cACR,0BAAMA,MAAM,gBACV,oDAEE,2BAAOA,MAAM,aAAakB,SAAUjB,KAAKS,aAAcO,MAAOhB,KAAKQ,MAAMN,WAAYgB,KAAK,SAASH,KAAK,gBAE1G,uDAEE,2BAAOhB,MAAM,aAAakB,SAAUjB,KAAKS,aAAcO,MAAOhB,KAAKQ,MAAMW,SAAUD,KAAK,SAASH,KAAK,eAG1G,kBAAC,EAAD,CAAab,WAAYF,KAAKQ,MAAMN,WAAYC,SAAUH,KAAKQ,MAAML,gB,GA/BrDG,a,kBCkBVc,MAhBf,WACE,OACE,yBAAKC,UAAU,OACd,yBAAKtB,MAAM,SACT,6CACA,4BACE,qFACA,wFACA,2EAAgD,gDAGlD,kBAAC,EAAD,QCLauB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f24733fb.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n\nclass HavenOutput extends Component{\n\n  render(){\n    return(\n      <div class=\"HavenOutput six columns\">\n        <p><strong>Part Length:</strong> {this.props.partLength}</p>\n        <p><strong>LongBar Length:</strong> {this.props.lbLength}</p>\n        <p><strong>Whole Parts:</strong> {parseInt((this.props.lbLength)/(this.props.partLength))}</p>\n        <p><strong>Math Offall:</strong> {((this.props.lbLength)%(this.props.partLength)).toFixed(3)}</p>\n        <p><strong>Cut Loss:</strong> {(parseInt((this.props.lbLength)/(this.props.partLength))) * .125}</p>\n        <p><strong>Left Over Offall:</strong> {((((this.props.lbLength)%(this.props.partLength)).toFixed(3)) - ((parseInt((this.props.lbLength)/(this.props.partLength))) * .125)).toFixed(3)}</p>\n      </div>\n    )\n  }\n}\n\nexport default HavenOutput;\n","import React, {Component} from 'react';\n\nimport HavenOutput from './HavenOutput';\n\nclass HavenInput extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      partLength: '',\n      lbLength: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e){\n   e.preventDefault();\n   this.setState({\n     [e.target.name]: e.target.value\n   })\n }\n\n\n  render(){\n    return(\n      <div class='havenInput'>\n         <form class=\"four columns\">\n           <label>\n             Input Part Length:\n             <input class=\"inputWidth\" onChange={this.handleChange} value={this.state.partLength} type=\"number\" name=\"partLength\" />\n           </label>\n           <label>\n             Input LongBar Length:\n             <input class=\"inputWidth\" onChange={this.handleChange} value={this.state.lgLength} type=\"number\" name=\"lbLength\" />\n           </label>\n         </form>\n         <HavenOutput partLength={this.state.partLength} lbLength={this.state.lbLength}/>\n     </div>\n    )\n  }\n}\n\nexport default HavenInput;\n","import React from 'react';\nimport HavenInput from './HavenInput';\nimport './normalize.css';\nimport './skeleton.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <div class='intro'>\n       <h1>Haven Calc 2k</h1>\n       <ul>\n         <li>.125 (1/8th inch) is lost per cut from verticle blade</li>\n         <li>2 - 3 inches Left over. Less may destroy the last piece!</li>\n         <li>Arrow UP or DOWN and watch the magic happen!<li>not on mobile</li></li>\n       </ul>\n     </div>\n       <HavenInput />\n   </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}